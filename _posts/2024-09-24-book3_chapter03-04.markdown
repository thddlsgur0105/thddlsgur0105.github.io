---
layout: post
title:  "9.22 Chapter 03-04"
date:   2024-09-22 19:02:31 +0900
categories: ML Advanced_Session
---

## 전제조건
* 30개의 테크닉을 이용해서 스포츠 센터의 데이터를 다룹니다.

* 회원 종류
    1. 종일 회원
    2. 주간 회원
    3. 야간 회원

* 입회비 행사
    1. 입회비 반액 할인
    2. 입회비 무료 행사
    3. 입회비 전액

* 탈퇴하려면 월말까지 신청하고 그 다음 달에 탈퇴됨

---

|No.|파일 이름|개요|
|:---:|:---:|:---:|
|1|use_log.csv|센터의 이용 이력 데이터. 기간은 2018년 4월 ~ 2019년 3월|
|2|customer_master.csv|2019년 3월 말 시점의 회원 데이터|
|3|class_master.csv|회원 구분 데이터 (종일, 주간, 야간)|
|4|campaign_master.csv|행사 구분 데이터 (입회비 유무 등)|

---

# 고객의 전체 모습을 파악하는 테크닉 10

## 데이터를 읽어 들이고 확인하자

```python
import pandas as pd
uselog = pd.read_csv('data/chap03/use_log.csv')
print(len(uselog))
uselog.head()
```

![use_log.csv](/assets/img/sample/34.png)

---

* `use_log`
    * 고객 ID, 이용일을 포함한 간단한 데이터
    * 어떤 고객이 언제 센터를 이용했는지를 알 수 있는 데이터입니다.

* `customer`
    * 고객 ID, 이름, 회원 클래스, 성별, 등록일 정보
    * is_deleted 열은 2019년 3월 시점에 탈퇴한 유저를 시스템에서 빨리 찾기 위한 칼럼

* `class_master`, `campaign_master`

---

* 분석을 위해 데이터를 가공할 때, **기준이 되는 데이터를 결정**해야 합니다. 
* 가능한 것은 고객 데이터인 `customer`와 이용 이력 데이터인 `uselog` 입니다.

## 고객 데이터를 가공하자

* `merge`: 중심이 되는 데이터를 바탕으로 **가로**로 결합

```python
customer_join = pd.merge(customer, class_master, on='class', how='left')
customer_join = pd.merge(customer_join, campaign_master, on='campaign_id', how='left')
customer_join.head()
```

![customer_join.csv](/assets/img/sample/35.png)

---

* 테크닉 21에서 불러온 `customer`에 회원 구분 `class_master`와 캠페인 구분 `campaign_master`를 결합해서 `customer_join`을 새로 생성합니다.

```python
customer_join.isnull().sum()
```

![결측치 확인](/assets/img/sample/36.png)

* `join`이후 결측치를 확인합니다.


## 고객 데이터를 집계하자

```python
# 회원 클래스는 종일반이 거의 절반을 차지하고 야간 다음, 주간 순입니다.
customer_join.groupby('class_name').count()['customer_id']

# 캠페인은 일반 입회가 많고, 입회 캠페인에 의한 가입이 약 20%입니다.
customer_join.groupby('campaign_name').count()['customer_id']

# 남녀 비율은 남자쪽이 약간 많다는 것을 알 수 있습니다.
customer_join.groupby('gender').count()['customer_id']

# 마지막으로 2019년 3월 현재 가입된 회원은 2842면이고 탈퇴한 유저는 1350명인 것을 알 수 있습니다.
customer_join.groupby('is_deleted').count()['customer_id']
```

```python
customer_join['start_date'] = pd.to_datetime(customer_join['start_date'])
customer_start = customer_join.loc[customer_join['start_date'] > pd.to_datetime('20180401')]
print(len(customer_start)) # 1361
print(len(customer_join)) # 4192
```

* start_date를 datetime형으로 변환한 후, customer_start 변수에 해당 유저의 데이터를 저장하고 개수를 세어봅니다.

## 최신 고객 데이터를 집계하자

* 현재 고객 데이터에는 이미 탈퇴한 고객도 포함되어 있기 때문에 월별 집계와는 차이가 있습니다. **여기서는 가장 최근 월의 고객 데이터를 집계해서 현재 고객의 전체 모습을 파악합니다.**

```python
customer_join['end_date'] = pd.to_datetime(customer_join['end_date'])
customer_newer = customer_join.loc[(customer_join['end_date'] >= pd.to_datetime('20190331'))
        | (customer_join['end_date'].isna())]
print(len(customer_newer)) # end-date가 2019년 03월 31일 이후인 회원들의 수
customer_newer['end_date'].unique() # 2953
```

* 종료일이 2019년 3월 31일 이후인 고객들을 추출하고, 추출한 데이터가 제대로 추출됐는지 확인하기 위해서 end_date의 유니크 개수를 확인합니다.

```python
# 종일: 1444, 주간: 696, 야간: 813
customer_newer.groupby('class_name').count()['customer_id']
# 입회비반액할인: 311, 입회비무료: 242, 일반: 2400
customer_newer.groupby('campaign_name').count()['customer_id']
# F: 1400, M: 1553
customer_newer.groupby('gender').count()['customer_id']
```

## 이용 이력 데이터를 집계하자

* 먼저, 고객마다 월 이용 횟수를 집계한 데이터를 작성합니다.

```python
uselog['usedate'] = pd.to_datetime(uselog['usedate'])
uselog['연월'] = uselog['usedate'].dt.strftime('%Y%m')
uselog_months = uselog.groupby(['연월', 'customer_id'], as_index=False).count()
uselog_months.rename(columns={'log_id': 'count'}, inplace=True)
del uselog_months['usedate']
uselog_months.head()
```
![고객 월 이용 횟수](/assets/img/sample/37.png)

---

* 고객별로 평균값, 중앙값, 최댓값, 최솟값을 집계합니다.

```python
uselog_customer = uselog_months.groupby('customer_id').agg({'count': ['mean', 'median', 'max', 'min']})
uselog_customer = uselog_customer.reset_index(drop=False)
uselog_customer.head()
```

![고객 월 이용 횟수](/assets/img/sample/38.png)

## 이용 이력 데이터로부터 정기 이용 플래그를 작성하자

* 여기서는 고객마다 월/요일별로 집계하고, **최댓값이 4 이상인 요일이 하나라도 있는 회원은 플래그를 1로 처리합니다.**

* 먼저, 고객마다 월/요일별로 집계합니다.

```python
uselog['weekday'] = uselog['usedate'].dt.weekday
uselog_weekday = uselog.groupby(['customer_id', '연월', 'weekday'], as_index=False).count()[['customer_id', '연월', 'weekday', 'log_id']]
uselog_weekday.rename(columns={'log_id': 'count'}, inplace=True)
uselog_weekday.head()
```

![고객 월/요일별 이용 횟수](/assets/img/sample/39.png)

```python
uselog_weekday = uselog_weekday.groupby('customer_id', as_index=False).max()[['customer_id', 'count']]
uselog_weekday['routine_flg'] = 0
uselog_weekday['routine_flg'] = uselog_weekday['routine_flg'].where(uselog_weekday['count']<4, 1)
uselog_weekday.head()
```

![고객 최대 이용 횟수](/assets/img/sample/40.png)

* 위 1행에서는 특정 월, 특정 요일에 가장 많이 이용한 횟수를 계산합니다.
* **즉, 이 횟수가 4 또는 5인 사람은 적어도 어떤 달에 매주 특정 요일에 정기적으로 방문한 고객입니다.**

## 고객 데이터와 이용 이력 데이터를 결합하자

* 우선 `uselog_customer`, `uselog_weekday`를 `customer_join`과 결합합니다.

```python
customer_join = pd.merge(customer_join, uselog_customer, on='customer_id', how='left')
customer_join = pd.merge(customer_join, uselog_weekday[['customer_id', 'routine_flg']],
                        on='customer_id', how='left')
customer_join.head()
```

![customer_join으로 결합과정](/assets/img/sample/41.png)

```python
customer_join.isnull().sum() # join 이후 결측치 확인
```

* 결측치를 확인하여 결합에 문제가 없음을 확인합니다.

## 회원 기간을 계산하자

* 회원기간: `end_date` - `start_date`
* end_date에 결측치가 들어 있을 경우, 탈퇴하지 않은 회원은 2019년 4월 30일로 채워서 회원 기간을 계산합니다.

```python
from dateutil.relativedelta import relativedelta
customer_join['calc_date'] = customer_join['end_date']
customer_join['calc_date'] = customer_join['calc_date'].fillna(pd.to_datetime('20190430'))
customer_join['membership_period'] = 0
for i in range(len(customer_join)): # 월 단위 집계
    delta = relativedelta(customer_join['calc_date'].iloc[i], customer_join['start_date'].iloc[i])
    customer_join['membership_period'].iloc[i] = delta.years*12 + delta.months
customer_join.head()
```

## 고객 행동의 각종 통계향을 파악하자

```python
customer_join[['mean', 'median', 'max', 'min']].describe()

customer_join.groupby('routine_flg').count()['customer_id']
```

![customer_join의 각종 통계량 파악](/assets/img/sample/42.png)

* 칼럼 이름 `mean`은 고객의 매월 평균 이용 횟수
* 행에 있는 `mean`은 고객의 매월 평균 이용 횟수의 평균
* 평균값, 중앙값에는 큰 차이가 없으며, 고객 1명당 이용 횟수는 약 5번 정도인 것을 알 수 있습니다.

```python
import matplotlib.pyplot as plt
%matplotlib inline
plt.hist(customer_join['membership_period']) # 회원 기간의 분포
```

![회원 기간 분포 히스토그램](/assets/img/sample/43.png)

## 탈퇴 회원과 지속 회원의 차이를 파악하자

```python
# 탈퇴 회원
customer_end = customer_join.loc[customer_join['is_deleted'] == 1]
customer_end.describe()
```

![회원 기간 분포 히스토그램](/assets/img/sample/44.png)

```python
# 지속 회원
customer_stay = customer_join.loc[customer_join['is_deleted']==0]
customer_stay.describe()
```

![회원 기간 분포 히스토그램](/assets/img/sample/45.png)

* 탈퇴 회원의 매월 이용 횟수의 평균값, 중앙값, 최댓값, 최솟값은 모두 지속 회원보다 작습니다.
* 특히, 평균값과 중앙값은 *1.5*배 정도 차이가 나는 것을 알 수 있습니다.
* 반면에 매월 최대 이용 횟수의 평균값은 지속 회원이 높기는 하지만, 탈퇴 회원도 *6.4* 정도입니다.
* `routine_flg`의 평균값은 차이가 크게 나서 지속 회원은 *0.98*로 많은 회원이 정기적으로 이용하고 있습니다. 하지만 탈퇴 회원은 *0.45*로 거의 절반은 랜덤하게 이용하고 있다고 생각할 수 있습니다.